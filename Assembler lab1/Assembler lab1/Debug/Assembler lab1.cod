; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30143.0 

	TITLE	C:\Users\maksn\source\repos\Assembler lab1\Assembler lab1\Debug\Assembler lab1.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?A@@3PAHA					; A
PUBLIC	?i@@3HA						; i
PUBLIC	?j@@3HA						; j
_BSS	SEGMENT
?A@@3PAHA DD	09H DUP (?)				; A
?i@@3HA	DD	01H DUP (?)				; i
?j@@3HA	DD	01H DUP (?)				; j
_BSS	ENDS
msvcjmc	SEGMENT
__97D3638F_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__60BC708E_cmath DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__589FA321_type_traits DB 01H
__12269DE6_xutility DB 01H
__20BB4341_malloc@h DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__7FE5F402_limits DB 01H
__79D216CD_xmemory DB 01H
__0D019051_xstring DB 01H
__760BB52B_stdexcept DB 01H
__A4685E82_xcall_once@h DB 01H
__A0B61CF9_time@h DB 01H
__DDB379A0_xthreads@h DB 01H
__14D0A8C0_atomic DB 01H
__1B354CA2_system_error DB 01H
__65ADBEC9_vcruntime_typeinfo@h DB 01H
__62F96EFF_typeinfo DB 01H
__C34BF88C_memory DB 01H
__EF0EAF83_xfacet DB 01H
__B2D2BA86_ctype@h DB 01H
__7D708D37_xlocinfo DB 01H
__D23FE460_xlocale DB 01H
__4495FA24_xiosbase DB 01H
__4CB88277_xlocnum DB 01H
__845859A3_ios DB 01H
__543DF656_Assembler lab1@cpp DB 01H
__A2FF0B9E_istream DB 01H
__C12F3EA4_ostream DB 01H
__74AB0D97_streambuf DB 01H
__B30C2184_iosfwd DB 01H
__1347750E_utility DB 01H
__038A2AA6_iterator DB 01H
__E458E21C_xstddef DB 01H
__F54903A0_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	__JustMyCode_Default
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_03JDANDILB@?$CFd?5@			; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_05PDJBBECF@pause@				; `string'
EXTRN	__imp__system:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_05PDJBBECF@pause@
CONST	SEGMENT
??_C@_05PDJBBECF@pause@ DB 'pause', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDANDILB@?$CFd?5@
CONST	SEGMENT
??_C@_03JDANDILB@?$CFd?5@ DB '%d ', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\maksn\source\repos\Assembler lab1\Assembler lab1\Assembler lab1.cpp
;	COMDAT _main
_TEXT	SEGMENT
_main	PROC						; COMDAT

; 8    : int main() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd

; 9    :     i = 0;

  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@@3HA, 0	; i

; 10   :     /*while (i < 9) {
; 11   :         j = 2 * i;
; 12   :         switch (i) {
; 13   :         case 5:j += 10; break;
; 14   :         case 6: j *= 2; break;
; 15   :         case 7: j -= 4; break;
; 16   :         case 8: j = 7; break;
; 17   :         default: j++;
; 18   : 
; 19   :         }
; 20   :         A[i] = j;
; 21   :         i++;
; 22   :     }*/
; 23   :     __asm {
; 24   :         mov i, 0

  00021	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@@3HA, 0	; i
$label$6:

; 25   :         label:
; 26   :         mov eax, i

  0002b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i

; 27   :             mov ecx, eax

  00030	8b c8		 mov	 ecx, eax

; 28   :             shl eax, 1

  00032	d1 e0		 shl	 eax, 1

; 29   :             mov j, eax

  00034	a3 00 00 00 00	 mov	 DWORD PTR ?j@@3HA, eax	; j

; 30   :             cmp i, 5

  00039	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?i@@3HA, 5	; i

; 31   :             je case5

  00040	74 29		 je	 SHORT $case5$7

; 32   : 
; 33   :             cmp i, 6

  00042	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?i@@3HA, 6	; i

; 34   :             je case6

  00049	74 2e		 je	 SHORT $case6$8

; 35   : 
; 36   :             cmp i, 7

  0004b	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR ?i@@3HA, 7	; i

; 37   :             je case7

  00052	74 2e		 je	 SHORT $case7$9

; 38   : 
; 39   :             cmp i, 8

  00054	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?i@@3HA, 8	; i

; 40   :             je case8

  0005b	74 33		 je	 SHORT $case8$10

; 41   :             add j, 1

  0005d	83 05 00 00 00
	00 01		 add	 DWORD PTR ?j@@3HA, 1	; j

; 42   :             mov eax, j 

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR ?j@@3HA	; j

; 43   :             
; 44   :             jmp endswitch

  00069	eb 46		 jmp	 SHORT $endswitch$11
$case5$7:

; 45   : 
; 46   :             case5 :
; 47   :         add j, 10

  0006b	83 05 00 00 00
	00 0a		 add	 DWORD PTR ?j@@3HA, 10	; j, 0000000aH

; 48   :             mov eax, j

  00072	a1 00 00 00 00	 mov	 eax, DWORD PTR ?j@@3HA	; j

; 49   :             jmp endswitch

  00077	eb 38		 jmp	 SHORT $endswitch$11
$case6$8:

; 50   : 
; 51   :             case6 :
; 52   :         mov EAX, j

  00079	a1 00 00 00 00	 mov	 eax, DWORD PTR ?j@@3HA	; j

; 53   :             shl EAX, 1

  0007e	d1 e0		 shl	 eax, 1

; 54   :             
; 55   :             jmp endswitch

  00080	eb 2f		 jmp	 SHORT $endswitch$11
$case7$9:

; 56   : 
; 57   :             case7 :
; 58   :             sub j, 4

  00082	83 2d 00 00 00
	00 04		 sub	 DWORD PTR ?j@@3HA, 4	; j

; 59   :                 mov eax, j

  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR ?j@@3HA	; j

; 60   :             jmp endswitch

  0008e	eb 21		 jmp	 SHORT $endswitch$11
$case8$10:

; 61   : 
; 62   :             case8 :
; 63   :         mov j, 7

  00090	c7 05 00 00 00
	00 07 00 00 00	 mov	 DWORD PTR ?j@@3HA, 7	; j

; 64   :             mov eax, j

  0009a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?j@@3HA	; j

; 65   :             jmp endswitch

  0009f	eb 10		 jmp	 SHORT $endswitch$11

; 66   : 
; 67   :             mov edx, 1

  000a1	ba 01 00 00 00	 mov	 edx, 1

; 68   : 
; 69   :             add j, edx

  000a6	01 15 00 00 00
	00		 add	 DWORD PTR ?j@@3HA, edx	; j

; 70   : 
; 71   :             mov eax, j

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR ?j@@3HA	; j
$endswitch$11:

; 72   :             
; 73   :             endswitch :
; 74   :             
; 75   :             mov A[ecx * 4], eax 

  000b1	89 04 8d 00 00
	00 00		 mov	 DWORD PTR ?A@@3PAHA[ecx*4], eax

; 76   :             inc i

  000b8	ff 05 00 00 00
	00		 inc	 DWORD PTR ?i@@3HA	; i

; 77   :             cmp i, 9

  000be	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?i@@3HA, 9	; i

; 78   :             jl label

  000c5	0f 8c 60 ff ff
	ff		 jl	 $label$6

; 79   :     }
; 80   :     for (i = 0; i < 9; i++)

  000cb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?i@@3HA, 0	; i
  000d5	eb 0d		 jmp	 SHORT $LN4@main
$LN2@main:
  000d7	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i
  000dc	83 c0 01	 add	 eax, 1
  000df	a3 00 00 00 00	 mov	 DWORD PTR ?i@@3HA, eax	; i
$LN4@main:
  000e4	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?i@@3HA, 9	; i
  000eb	7d 1c		 jge	 SHORT $LN3@main

; 81   :         printf("%d ", A[i]);

  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR ?i@@3HA	; i
  000f2	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?A@@3PAHA[eax*4]
  000f9	51		 push	 ecx
  000fa	68 00 00 00 00	 push	 OFFSET ??_C@_03JDANDILB@?$CFd?5@
  000ff	e8 00 00 00 00	 call	 _printf
  00104	83 c4 08	 add	 esp, 8
  00107	eb ce		 jmp	 SHORT $LN2@main
$LN3@main:

; 82   :     printf("\n");

  00109	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0010e	e8 00 00 00 00	 call	 _printf
  00113	83 c4 04	 add	 esp, 4

; 83   : 
; 84   :     system("pause");

  00116	8b f4		 mov	 esi, esp
  00118	68 00 00 00 00	 push	 OFFSET ??_C@_05PDJBBECF@pause@
  0011d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__system
  00123	83 c4 04	 add	 esp, 4
  00126	3b f4		 cmp	 esi, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 85   :     return 0;

  0012d	33 c0		 xor	 eax, eax

; 86   : }

  0012f	5f		 pop	 edi
  00130	5e		 pop	 esi
  00131	5b		 pop	 ebx
  00132	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00138	3b ec		 cmp	 ebp, esp
  0013a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013f	8b e5		 mov	 esp, ebp
  00141	5d		 pop	 ebp
  00142	c3		 ret	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 956  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7d dc	 lea	 edi, DWORD PTR [ebp-36]
  0000f	b9 09 00 00 00	 mov	 ecx, 9
  00014	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00019	f3 ab		 rep stosd
  0001b	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  00020	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  00025	8d 45 0c	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00028	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  0002b	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002e	50		 push	 eax
  0002f	6a 00		 push	 0
  00031	8b 4d 08	 mov	 ecx, DWORD PTR __Format$[ebp]
  00034	51		 push	 ecx
  00035	8b f4		 mov	 esi, esp
  00037	6a 01		 push	 1
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____acrt_iob_func
  0003f	83 c4 04	 add	 esp, 4
  00042	3b f4		 cmp	 esi, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	50		 push	 eax
  0004a	e8 00 00 00 00	 call	 __vfprintf_l
  0004f	83 c4 10	 add	 esp, 16			; 00000010H
  00052	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 961  :         __crt_va_end(_ArgList);

  00055	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 962  :         return _Result;

  0005c	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 963  :     }

  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi
  00061	5b		 pop	 ebx
  00062	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00068	3b ec		 cmp	 ebp, esp
  0006a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006f	8b e5		 mov	 esp, ebp
  00071	5d		 pop	 ebp
  00072	c3		 ret	 0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT

; 644  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __6DFAE8B8_stdio@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00021	8b f4		 mov	 esi, esp
  00023	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00026	50		 push	 eax
  00027	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002a	51		 push	 ecx
  0002b	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  0002e	52		 push	 edx
  0002f	8b 45 08	 mov	 eax, DWORD PTR __Stream$[ebp]
  00032	50		 push	 eax
  00033	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00038	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0003b	51		 push	 ecx
  0003c	8b 10		 mov	 edx, DWORD PTR [eax]
  0003e	52		 push	 edx
  0003f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vfprintf
  00045	83 c4 18	 add	 esp, 24			; 00000018H
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 646  :     }

  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00058	3b ec		 cmp	 ebp, esp
  0005a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005f	8b e5		 mov	 esp, ebp
  00061	5d		 pop	 ebp
  00062	c3		 ret	 0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __A2143F22_corecrt_stdio_config@h
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00021	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002f	3b ec		 cmp	 ebp, esp
  00031	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\maksn\source\repos\Assembler lab1\Assembler lab1\Assembler lab1.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __543DF656_Assembler lab1@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\maksn\source\repos\Assembler lab1\Assembler lab1\Assembler lab1.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b fd		 mov	 edi, ebp
  0000e	33 c9		 xor	 ecx, ecx
  00010	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00015	f3 ab		 rep stosd
  00017	b9 00 00 00 00	 mov	 ecx, OFFSET __543DF656_Assembler lab1@cpp
  0001c	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi
  00023	5b		 pop	 ebx
  00024	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0002a	3b ec		 cmp	 ebp, esp
  0002c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00031	8b e5		 mov	 esp, ebp
  00033	5d		 pop	 ebp
  00034	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
